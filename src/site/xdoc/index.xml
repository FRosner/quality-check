<?xml version="1.0"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>About Quality-Check</title>
		<author>André Rouél</author>
		<author>Dominik Seichter</author>
	</properties>
	<body>

		<section name="What is Quality-Project?">
			<p>
				The goal of quality-project is to provide small Java libraries which assist you in writing higher quality code.
			</p>
			<p>
				Currently it consists of two modules: <a href="qualitycheck.html">quality-check</a> and <a href="modules/quality-check/index.html">quality-test</a>.
				<em>Quality-check</em> provides basic runtime code quality checks. <em>Quality-test</em>
				includes several tools improve the quality of unit tests.
			</p>
			<p>
				Here's some example code to show both modules.
			</p>
			<subsection name="Quality-Check">
				<p>
					We believe that all method arguments have to be checked for 
					technical validity, to avoid technical errors such as <code>NullPointerExceptions</code>
					or <code>IndexOutOfBoundsException</code>. <em>Quality-check</em> provides several
					checks to ensure your parameters are valid. For more information take a look in to the <a href="qualitycheck.html">introduction</a>.
				</p>
				<source><![CDATA[
@ArgumentsChecked
void doSomething(final List<String> list) {
   	Check.isNull(list, "list");
	Check.isEmpty(list, "list");
	
	// ... use list in method
}]]></source>
			</subsection>
			<subsection name="Quality-Test">
				<p>
					In our opinion unit tests should focus on testing algorithms and functional behaviour.
					Way to often you have to care about test data instead. Therefore, <em>quality-test</em>
					provides its <em>Blueprint</em> feature to construct objects where all attributes
					are filled with values.
				</p>
				<source><![CDATA[
@Test
void testSomething() {
   	final CustomerDTO customer = Blueprint.rand()
   			.with("name", "Smith")
   			.with(Gender.class, Gender.MALE)
   			.construct(CustomerDTO.class);
   			
   	// ... use DTO now in test ...
}
]]></source>			
			</subsection>
		</section>		
		<section name="Contribute">
			<ul>
				<li>
					Report bugs, feature requests and other issues in the
					<a target="_blank" href="https://github.com/before/quality-check/issues">issue tracking</a>
					application. Questions can also be sent to our <a href="https://lists.sourceforge.net/lists/listinfo/qualitycheck-users">mailing list</a>.
				</li>
				<li>
					Help with the documentation by pointing out areas that are lacking or unclear, and if you are so inclined,
					submitting patches to correct it. You can quickly contribute rough thoughts by forking this project on
					<a target="_blank" href="https://github.com/before/quality-check">GitHub</a> or
					downloading at <a target="_blank" href="https://sourceforge.net/projects/qualitycheck/">Sourceforge</a>
					, or you can volunteer to help collate and organize information that is already there.
				</li>
				<li>
				    Some software metrics can be found on our Continuous Integration server at <a target="_blank" href="https://buildhive.cloudbees.com/job/before/job/quality-check">Buildhive</a>
				    or <a target="_blank" href="https://www.ohloh.net/p/quality-check">Ohloh</a>.
				</li>
			</ul>
			<p>Your participation in this project is much appreciated!</p>
		</section>

	</body>
</document>
