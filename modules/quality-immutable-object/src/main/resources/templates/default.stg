immutableCompilationUnit(settings) ::= <<
<package(settings.packageDeclaration)>

<importJsr305Annotations(settings)>

<importQualityCheck(settings)>

<importGuavaClasses(settings)>

<settings.imports:importStatement(); separator = "\n">

<immutableClass(settings)>
>>


immutableClass(settings) ::= <<
<annotateImmutable(settings)>
public final class <settings.immutableName> implements <settings.interfaces:interface(); separator = ", "> {

	<builderClass(settings, true)>

	<settings.fields:constant(); separator = "\n">

	<hashCodePrecomputationMethod(settings.fields, settings)>

	<copyOfMethods(settings); separator = "\n">

	<settings.fields:asFinalField(); separator = "\n">

	<if(settings.hashCodePrecomputation)>private final int hash;<endif>

	<immutableConstructor(settings.immutableName, settings.fields, settings)>

	<equalsMethod(settings.immutableName, settings.fields, settings)>

	<settings.fields:accessorMethod(); separator = "\n">

	<hashCodeMethod(settings.fields, settings)>

	<toStringMethod(settings.fields, settings)>

}
>>


accessorMethod(field) ::= <<
<if(field.static.undefined)>
<field.annotations:annotate(); separator = "\n">
public <importedType(field.type)> <field.accessorMethodName>() {
	return <field>;
}
<endif>
>>


accessToMemberField(field) ::= <<
<if(field.static.undefined)><field><endif>
>>


annotate(annotation) ::= <<
@<annotation.type.name>
>>


annotateImmutable(settings) ::= <<
<if(settings.jsr305Annotations)>@Immutable<endif>
>>
annotateNonnull(settings) ::= <<
<if(settings.jsr305Annotations)>@Nonnull<endif>
>>
annotateNotThreadSafe(settings) ::= <<
<if(settings.jsr305Annotations)>@NotThreadSafe<endif>
>>


attribute(field) ::= <<
<if(field.static.undefined)><field.annotations:annotate()> final <importedType(field.type)> <field; format="attribute"><endif>
>>


constant(field) ::= <<
<if(!field.static.undefined)>
<field.annotations:annotate(); separator = "\n">
<field.visibility.name> static final <importedType(field.type)> <field> = <field.value>;
<endif>
>>


immutableConstructor(name, fields, settings) ::= <<
public <name>(<fields:attribute(); separator = ",">) {
<setupFieldsImmutable(fields, settings)>
<if(settings.hashCodePrecomputation)>hash = buildHashCode(<fields:accessToMemberField(); separator = ",">);<endif>
}
>>


copyOfMethods(settings) ::= <<
<if(settings.copyMethods)>
<annotateNonnull(settings)>
public static <settings.immutableName> copyOf(<annotateNonnull(settings)> final <settings.mainInterface:interface()> <settings.mainInterface.type.name; format="toLowerCamelCase">) {
	<if(settings.qualityCheck)>Check.notNull(<settings.mainInterface.type.name; format="toLowerCamelCase">, "<settings.mainInterface.type.name; format="toLowerCamelCase">");<endif>
	return new <settings.immutableName>(<copyOfAttributes(settings)>);
}

<annotateNonnull(settings)>
public static <settings.immutableName> copyOnlyIfNecessary(<annotateNonnull(settings)> final <settings.mainInterface:interface()> <settings.mainInterface.type.name; format="toLowerCamelCase">) {
	<if(settings.qualityCheck)>Check.notNull(<settings.mainInterface.type.name; format="toLowerCamelCase">, "<settings.mainInterface.type.name; format="toLowerCamelCase">");<endif>
	return <settings.mainInterface.type.name; format="toLowerCamelCase"> instanceof <settings.immutableName> ? (<settings.immutableName>) <settings.mainInterface.type.name; format="toLowerCamelCase"> : copyOf(<settings.mainInterface.type.name; format="toLowerCamelCase">);
}
<endif>
>>


copyOfAttribute(field, settings) ::= <<
<if(field.static.undefined)><settings.mainInterface.type.name; format="toLowerCamelCase">.<field.accessorMethodName>()<endif>
>>


copyOfAttributes(settings) ::= <<
<settings.fields:{ f |
	<copyOfAttribute(f, settings)>
}; separator = ",">
>>


equalsMethod(name, fields, settings) ::= <<
<if(settings.hashCodeAndEquals)>
@Override
public boolean equals(final Object obj) {
	if (this == obj)
		return true;
	if (obj == null)
		return false;
	if (getClass() != obj.getClass())
		return false;
	<name> other = (<name>) obj;
	<if(settings.guava)>
	return <fields:equalsMemberFieldWithOther(); separator = " && ">;
	<else>
	<fields:equalsFieldBlock()>
	return true;
	<endif>
}
<endif>
>>


equalsFieldBlock(field) ::= <<
<if(field.static.undefined)><if(!field.type.primitive && field.nullable)>
if (<field> == null) {
	if (other.<field> != null)
		return false;
} else <endif>
if (<if(field.type.primitive)><field> != other.<field><else>!<field>.equals(other.<field>)<endif>)
	return false;<endif>
>>


equalsMemberFieldWithOther(field) ::= <<
<if(field.static.undefined)>Objects.equal(this.<field>, other.<field>)<endif>
>>


hashCodeMethod(fields, settings) ::= <<
<if(settings.hashCodeAndEquals)>
@Override
public int hashCode() {
<if(settings.hashCodePrecomputation)>
return hash;
<else>
<hashCodeMethodBody(fields, settings)>
<endif>
}
<endif>
>>
hashCodeMethodBody(fields, settings) ::= <<
<if(settings.guava)>
return Objects.hashCode(<fields:accessToMemberField(); separator = ",">);
<else>
final int prime = 31;
int result = 1;
<fields:hashCodeField()>
return result;<endif>
>>
hashCodeField(field) ::= <<
<if(field.static.undefined)>
result = prime * result + 
<if(field.type.boolean)>(<field> ? 1231 : 1237)
<elseif(field.type.primitive)><field>
<elseif(field.nullable)>(<field> == null ? 0 : <field>.hashCode())
<else><field>.hashCode()
<endif>;<endif>
>>
hashCodePrecomputationMethod(fields, settings) ::= <<
<if(settings.hashCodePrecomputation)>
private static int buildHashCode(<fields:attribute(); separator = ",">) {
	<hashCodeMethodBody(fields, settings)>
}<endif>
>>


asFinalField(field) ::= <<
<if(field.static.undefined)>
<field.annotations:annotate(); separator = "\n">
private final <importedType(field.type)> <field>;
<endif>
>>
asNonFinalField(field) ::= <<
<field.annotations:annotate(); separator = "\n">
<if(field.static.undefined)>
private <importedType(field.type)> <field>;
<endif>
>>


importStatement(i) ::= <<
<if(i)>import <i.type.package.name>.<i.type.name>;<endif>
>>
importGuavaClasses(settings) ::= <<
<if(settings.guava)>
import com.google.common.base.Objects;
import com.google.common.collect.*;
<endif>
>>
importJsr305Annotations(settings) ::= <<
<if(settings.jsr305Annotations)>
import javax.annotation.Nonnegative;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.concurrent.Immutable;
import javax.annotation.concurrent.NotThreadSafe;
<endif>
>>
importQualityCheck(settings) ::= <<
<if(settings.qualityCheck)>import net.sf.qualitycheck.Check;<endif>
>>


importedType(type) ::= <<
<type.name>
<if(!type.genericDeclaration.undefined)>
\<<type.genericDeclaration.declaration>\>
<endif>
>>


interface(interface) ::= <<
<interface.type.name>
>>


package(package) ::= <<
<if(!package.undefined)>package <package.name>;<endif>
>>


setupFieldMutable(field, settings) ::= <<
<if(field.static.undefined)>this.<field> = <field; format="copy">;<endif>
>>
setupFieldsImmutable(fields, settings) ::= <<
<fields: { f| <setupFieldImmutable(f, settings)> }>
>>
setupFieldImmutable(field, settings) ::= <<
<if(field.static.undefined)>this.<field> = <field; format="immutable">;<endif>
>>


toStringMethod(fields, settings) ::= <<
<if(settings.toString)>
@Override
public String toString() {
	return "<settings.immutableName> [<fields:toStringField(); separator=", ">]";
}
<endif>
>>
toStringField(field) ::= <<
<if(field.static.undefined)><field>=" + this.<field> + "<endif>
>>











builderCompilationUnit(settings) ::= <<
<if(!settings.builderName.empty)>
<package(settings.packageDeclaration.name)>

<settings.imports:importStatement(); separator = "\n">
<if(settings.jsr305Annotations)>import javax.annotation.concurrent.NotThreadSafe;<endif>

<builderClass(settings, false)>
<endif>
>>


builderClass(settings, innerClass) ::= <<
<if(!settings.builderName.empty)>
<annotateNotThreadSafe(settings)>
public <if(innerClass)>static<endif> final class <settings.builderName><if(settings.builderImplementsInterface)> implements <interface(settings.mainInterface); separator = ","><endif> {

	<if(settings.builderImplementsInterface)><settings.fields:constant(); separator = "\n"><endif>

	<settings.fields:asNonFinalField(); separator = "\n">

	<defaultConstructor(settings)>

	<copyConstructor(settings)>

	<if(settings.builderImplementsInterface)><settings.fields:accessorMethod(); separator = "\n"><endif>

	<mutatorMethods(settings); separator = "\n">

	<buildMethod(settings); separator = "\n">

}
<endif>
>>


defaultConstructor(settings) ::= <<
public <settings.builderName>() {
	// default constructor
}
>>


buildMethod(settings) ::= <<
<annotateNonnull(settings)>
public <settings.immutableName> build() {
	return new <settings.immutableName>(<settings.fields:buildMethodAttribute(); separator = ",">);
}
>>
buildMethodAttribute(field) ::= <<
<if(field.static.undefined)><field><endif>
>>


copyConstructor(settings) ::= <<
<if(settings.builderCopyConstructor)>
public <settings.builderName>(<annotateNonnull(settings)> final <importedType(settings.mainInterface.type)> <settings.mainInterface.type.name; format="toLowerCamelCase">) {
	<if(settings.qualityCheck)>Check.notNull(<settings.mainInterface.type.name; format="toLowerCamelCase">, "<settings.mainInterface.type.name; format="toLowerCamelCase">");<endif>
	<settings.fields:{ f | <copyConstructorField(f, settings)> }>
}
<endif>
>>
copyConstructorField(field, settings) ::= <<
<if(field.static.undefined)>this.<field> = <field; format="copy_from_interface">;<endif>
>>


mutatorMethods(settings) ::= <<
<settings.fields:{ field | <mutatorMethod(field, settings)>}>
>>
mutatorMethod(field, settings) ::= <<
<if(field.static.undefined)>
<if(settings.builderFluentMutators)><annotateNonnull(settings)><endif>
public <mutatorMethodReturnType(settings)> <mutatorMethodName(field, settings)>(<field.annotations:annotate(); separator = " "> final <importedType(field.type)> <field; format="attribute">) {
	<setupFieldMutable(field, settings)>
	<mutatorMethodReturnStatement(settings)>
}
<endif>
>>
mutatorMethodName(field, settings) ::= <<
<if(settings.builderFlatMutators)>
<field; format="attribute">
<else>
<field.mutatorMethodName>
<endif>
>>
mutatorMethodReturnStatement(settings) ::= <<
<if(settings.builderFluentMutators)>return this;<endif>
>>
mutatorMethodReturnType(settings) ::= <<
<if(settings.builderFluentMutators)><settings.builderName><else>void<endif>
>>
