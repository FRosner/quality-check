immutableCompilationUnit(settings) ::= <<
<package(settings.packageDeclaration.name)>

<importJsr305Annotations(settings)>

<settings.imports:importStatement(); separator = "\n">

<immutableClass(settings)>
>>


immutableClass(settings) ::= <<
<annotateImmutable(settings)>
public final class <settings.immutableName> implements <settings.interfaceDeclaration:interface(); separator = ","> {

	<if(settings.builderName)><builderClass(settings, true)><endif>

	<settings.fields:constant(); separator = "\n">

	<copyOfMethod(settings); separator = "\n">

	<settings.fields:asFinalField(); separator = "\n">

	<immutableConstructor(settings.immutableName, settings.fields, settings.guava)>

	<equalsMethod(settings.immutableName, settings.fields, settings.guava)>

	<settings.fields:accessorMethod(); separator = "\n">

	<hashCodeMethod(settings.fields, settings.guava)>

}
>>


accessorMethod(field) ::= <<
<if(field.static.undefined)>
<field.annotations:annotate(); separator = "\n">
public <importedType(field.type)> <field.accessorMethodName>() {
	return <field.name>;
}
<endif>
>>


accessToMemberField(field) ::= <<
<if(field.static.undefined)>this.<field.name><endif>
>>


annotate(annotation) ::= <<
@<annotation.type.name>
>>


annotateImmutable(settings) ::= <<
<if(settings.jsr305Annotations)>@Immutable<endif>
>>
annotateNonnull(settings) ::= <<
<if(settings.jsr305Annotations)>@Nonnull<endif>
>>
annotateNotThreadSafe(settings) ::= <<
<if(settings.jsr305Annotations)>@NotThreadSafe<endif>
>>


attribute(field) ::= <<
<if(field.static.undefined)><field.annotations:annotate()> final <importedType(field.type)> <field.name><endif>
>>


constant(field) ::= <<
<if(!field.static.undefined)>
<field.annotations:annotate(); separator = "\n">
<field.visibility.name> static final <importedType(field.type)> <field.name> = <field.value>;
<endif>
>>


immutableConstructor(name, fields, useGuava) ::= <<
public <name>(<fields:attribute(); separator = ",">) {
	<setupFieldsImmutable(fields, useGuava)>}
>>


copyOfMethod(settings) ::= <<
<annotateNonnull(settings)>
public static <settings.immutableName> copyOf(<annotateNonnull(settings)> final <settings.interfaceDeclaration:interface()> <settings.interfaceDeclaration.type.name; format="toLower">) {
	Check.notNull(<settings.interfaceDeclaration.type.name; format="toLower">, "<settings.interfaceDeclaration.type.name; format="toLower">");
	return new <settings.immutableName>(<copyOfAttributes(settings)>);
}
>>


copyOfAttribute(field, settings) ::= <<
<if(field.static.undefined)><settings.interfaceDeclaration.type.name; format="toLower">.<field.accessorMethodName>()<endif>
>>


copyOfAttributes(settings) ::= <<
<settings.fields:{ f |
	<copyOfAttribute(f, settings)>
}; separator = ",">
>>


equalsMethod(name, fields, useGuava) ::= <<
@Override
public boolean equals(final Object obj) {
	if (this == obj)
		return true;
	if (obj == null)
		return false;
	if (getClass() != obj.getClass())
		return false;
	<name> other = (<name>) obj;
	<if(useGuava)>
	return <fields:equalsMemberFieldWithOther(); separator = " && ">;
	<else>
	<fields:equalsFieldBlock()>
	return true;
	<endif>
}
>>


equalsFieldBlock(field) ::= <<
<if(field.static.undefined)><if(field.nullable)>
if (<field.name> == null) {
	if (other.<field.name> != null)
		return false;
} else <endif>
if (<if(field.type.primitive)><field.name> != other.<field.name><else>!<field.name>.equals(other.<field.name>)<endif>)
	return false;<endif>
>>


equalsMemberFieldWithOther(field) ::= <<
<if(field.static.undefined)>Objects.equal(this.<field.name>, other.<field.name>)<endif>
>>


hashCodeMethod(fields, useGuava) ::= <<
@Override
public int hashCode() {
	<if(useGuava)>
	return Objects.hashCode(<fields:accessToMemberField(); separator = ",">);
	<else>
	final int prime = 31;
	int result = 1;
	<fields:hashCodeField()>
	return result;
	<endif>
}
>>
hashCodeField(field) ::= <<
<if(field.static.undefined)>
result = prime * result + 
<if(field.type.primitive)><field.name>
<elseif(field.nullable)>(<field.name> == null ? 0 : <field.name>.hashCode())
<else><field.name>.hashCode()
<endif>;<endif>
>>


asFinalField(field) ::= <<
<if(field.static.undefined)>
<field.annotations:annotate(); separator = "\n">
private final <importedType(field.type)> <field.name>;
<endif>
>>
asNonFinalField(field) ::= <<
<field.annotations:annotate(); separator = "\n">
<if(field.static.undefined)>
private <importedType(field.type)> <field.name>;
<else>
<field.visibility.name> <field.static.name> <field.final.name> <importedType(field.type)> <field.name> = <field.value>;
<endif>
>>


importStatement(i) ::= <<
<if(i)>import <i.type.package.name>.<i.type.name>;<endif>
>>
importJsr305Annotations(settings) ::= <<
<if(settings.jsr305Annotations)>
import javax.annotation.Nonnegative;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.concurrent.Immutable;
import javax.annotation.concurrent.NotThreadSafe;
<endif>
>>


importedType(type) ::= <<
<type.name>
<if(!type.genericDeclaration.undefined)>
\<<type.genericDeclaration.declaration>\>
<endif>
>>


interface(interface) ::= <<
<interface.type.name>
>>


package(package) ::= <<
<if(package)>package <package>;<endif>
>>


setupFieldsMutable(fields, useGuava) ::= <<
<fields: { f|
	<setupFieldMutable(f, useGuava)>
}>
>>
setupFieldMutable(field, useGuava) ::= <<
<if(field.static.undefined)>this.<field.name> = <setupFieldRegardCollectionCopy(field, useGuava)>;<endif>
>>
setupFieldsImmutable(fields, useGuava) ::= <<
<fields: { f|
	<setupFieldImmutable(f, useGuava)>
}>
>>
setupFieldImmutable(field, useGuava) ::= <<
<if(field.static.undefined)>this.<field.name> = <setupFieldRegardCollectionImmutability(field, useGuava)>;<endif>
>>
setupFieldRegardCollectionImmutability(field, useGuava) ::= <<
<if(field.type.collectionVariant)>
	<if(field.nonnull && useGuava)><field; format="check,immutable,guava">
	<elseif(field.nonnull && !useGuava)><field; format="check,immutable">
	<elseif(!field.nonnull && useGuava)><field; format="immutable,guava">
	<else><field; format="immutable"><endif>
<else>
	<if(!field.nullable)><field; format="check">
	<else><field.name><endif>
<endif>
>>
setupFieldRegardCollectionCopy(field, useGuava) ::= <<
<if(field.type.collectionVariant)>
	<if(field.nonnull && useGuava)><field; format="check,copy,guava">
	<elseif(field.nonnull && !useGuava)><field; format="check,copy">
	<elseif(!field.nonnull && useGuava)><field; format="copy,guava">
	<else><field; format="immutable"><endif>
<else>
	<if(!field.nullable)><field; format="check">
	<else><field.name><endif>
<endif>
>>


















builderCompilationUnit(settings) ::= <<
<package(settings.packageDeclaration.name)>

<settings.imports:importStatement(); separator = "\n">
<if(settings.jsr305Annotations)>import javax.annotation.concurrent.NotThreadSafe;<endif>

<builderClass(settings, false)>
>>


builderClass(settings, innerClass) ::= <<
<annotateNotThreadSafe(settings)>
public <if(innerClass)>static<endif> final class <settings.builderName> implements <interface(settings.interfaceDeclaration); separator = ","> {

	<settings.fields:asNonFinalField(); separator = "\n">
	<defaultConstructor(settings)>
	<copyConstructor(settings)>
	<settings.fields:accessorMethod(); separator = "\n">
	<mutatorMethods(settings); separator = "\n">
	<buildMethod(settings); separator = "\n">

}
>>


defaultConstructor(settings) ::= <<
public <settings.builderName>() {
	// default constructor
}
>>


buildMethod(settings) ::= <<
<annotateNonnull(settings)>
public <settings.immutableName> build() {
	return new <settings.immutableName>(<settings.fields:buildMethodAttribute(); separator = ",">);
}
>>
buildMethodAttribute(field) ::= <<
<if(field.static.undefined)><field.name><endif>
>>


copyConstructor(settings) ::= <<
<if(settings.builderCopyConstructor)>
public <settings.builderName>(<annotateNonnull(settings)> final <importedType(settings.interfaceDeclaration.type)> <settings.interfaceDeclaration.type.name; format="toLower">) {
	<settings.fields:{ f | <copyConstructorField(f, settings)> }>
}
<endif>
>>
copyConstructorField(field, settings) ::= <<
<if(field.static.undefined)>this.<field.name> = <settings.interfaceDeclaration.type.name; format="toLower">.<field.accessorMethodName>();<endif>
>>
copyConstructorFieldRegardCollectionCopy(field, useGuava) ::= <<
<if(field.type.collectionVariant)>
	<if(field.nonnull && useGuava)><field; format="check,copy,guava">
	<elseif(field.nonnull && !useGuava)><field; format="check,copy">
	<elseif(!field.nonnull && useGuava)><field; format="copy,guava">
	<else><field; format="immutable"><endif>
<else>
	<if(!field.nullable)><field; format="check">
	<else><field.name><endif>
<endif>
>>


mutatorMethods(settings) ::= <<
<settings.fields:{ field | <mutatorMethod(field, settings)>}>
>>
mutatorMethod(field, settings) ::= <<
<if(field.static.undefined)>
<if(settings.builderFluentMutators)><annotateNonnull(settings)><endif>
public <mutatorMethodReturnType(settings)> <mutatorMethodName(field, settings)>(<field.annotations:annotate(); separator = " "> final <importedType(field.type)> <field.name>) {
	<setupFieldMutable(field, settings.guava)>
	<mutatorMethodReturnStatement(settings)>
}
<endif>
>>
mutatorMethodName(field, settings) ::= <<
<if(settings.builderFlatMutators)>
<field.name>
<else>
<field.mutatorMethodName>
<endif>
>>
mutatorMethodReturnStatement(settings) ::= <<
<if(settings.builderFluentMutators)>return this;<endif>
>>
mutatorMethodReturnType(settings) ::= <<
<if(settings.builderFluentMutators)><settings.builderName><else>void<endif>
>>
