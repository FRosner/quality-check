renderBuilderClassFile(builderName, clazz, copyConstructorAttribute, notThreadSafeAnnotation, innerClass) ::= <<
<renderPackage(clazz.package.name)>

<clazz.imports:importStatement(); separator = "\n">
<notThreadSafeAnnotation:importStatement()>

<renderBuilderClass(builderName, clazz, copyConstructorAttribute, notThreadSafeAnnotation, innerClass)>
>>


renderBuilderClass(builderName, clazz, copyConstructorAttribute, notThreadSafeAnnotation, innerClass) ::= <<
<if(notThreadSafeAnnotation)>@<notThreadSafeAnnotation.type.name><endif>
<clazz.visibility.name> <if(innerClass)>static<endif> <clazz.final.name> class <builderName> implements <clazz.interfaces:renderInterface(); separator = ","> {

	<clazz.fields:builderField(); separator = "\n">
	<builderDefaultConstructor(builderName)>
	<renderCopyConstructor(builderName,copyConstructorAttribute,clazz.fields)>
	<renderAccessorsAndMutators(builderName,clazz.fields); separator = "\n">
	<renderBuildMethod(clazz); separator = "\n">

}
>>


renderBuildMethod(clazz) ::= <<
@Nonnull
public <clazz.name> build() {
	return new <clazz.name>(<clazz.fields:renderBuildMethodField(); separator = ",">);
}
>>


renderBuildMethodField(field) ::= <<
<if(field.static.undefined)><field.name><endif>
>>


renderAccessorsAndMutators(builderName,fields) ::= <<
<fields:renderAccessorMethod(); separator = "\n">
<renderMutatorMethods(builderName,fields); separator = "\n">
>>


renderAccessorMethod(field) ::= <<
<if(field.static.undefined)>
<field.annotations:renderAnnotation(); separator = "\n">
public <importedType(field.type)> <field.accessorMethodName>() {
	return <field.name>;
}
<endif>
>>


renderAnnotation(annotation) ::= <<
@<annotation.type.name>
>>


builderDefaultConstructor(name) ::= <<
public <name>() {
	// default constructor
}
>>


renderCopyConstructor(name,attribute,fields) ::= <<
<if(attribute)>
public <name>(<attribute.annotations:renderAnnotation(); separator = " "> final <importedType(attribute.type)> <attribute.name>) {
	<fields:{ f | <renderCopyField(f, attribute.name)> }>
}
<endif>
>>


renderCopyField(field, attributeName) ::= <<
<if(field.static.undefined)>this.<field.name> = <attributeName>.<field.accessorMethodName>();<endif>
>>


builderField(field) ::= <<
<field.annotations:renderAnnotation(); separator = "\n">
<if(field.static.undefined)>
private <importedType(field.type)> <field.name>;
<else>
<field.visibility.name> <field.static.name> <field.final.name> <importedType(field.type)> <field.name> = <field.value>;
<endif>
>>


importStatement(i) ::= <<
<if(i)>import <i.type.package.name>.<i.type.name>;<endif>
>>


importedType(type) ::= <<
<type.name>
<if(!type.genericDeclaration.undefined)>
\<<type.genericDeclaration.declaration>\>
<endif>
>>


renderInterface(interface) ::= <<
<interface.type.name>
>>


renderMutatorMethod(builderName,field) ::= <<
<if(field.static.undefined)>
@Nonnull
public <builderName:renderMutatorReturnType()> <field.mutatorMethodName>(<field.annotations:renderAnnotation(); separator = " "> final <importedType(field.type)> <field.name>) {
	<renderSetupField(field)>
	<renderMutatorReturnStatement(builderName)>
}
<endif>
>>


renderMutatorMethods(builderName,fields) ::= <<
<fields:{ field | <renderMutatorMethod(builderName,field)>}>
>>


renderMutatorReturnStatement(builderName) ::= <<
<if(builderName)>return this;<endif>
>>


renderMutatorReturnType(builderName) ::= <<
<if(builderName)><builderName><else>void<endif>
>>


renderPackage(package) ::= <<
<if(package)>package <package>;<endif>
>>


renderSetupField(field) ::= <<
<field.annotations:{ annotation |
<if(annotation.nonnegative)>this.<field.name> = Check.notNegative(<field.name>,"<field.name>");
<elseif(annotation.nonnull)>this.<field.name> = Check.notNull(<field.name>,"<field.name>");
<else>this.<field.name> = <field.name>;<endif>}>
>>
